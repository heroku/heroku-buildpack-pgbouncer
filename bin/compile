#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
if [ "$STACK" == "heroku-16" ]; then
  PGBOUNCER_VERSION="1.7.2-heroku"
  STUNNEL_VERSION="5.40"
else
  PGBOUNCER_VERSION="1.7-heroku"
  STUNNEL_VERSION="5.28"
fi

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

echo "Using pgbouncer version: ${PGBOUNCER_VERSION}" | indent
echo "Using stunnel version: ${STUNNEL_VERSION}" | indent

# vendor directories
VENDORED_PGBOUNCER="vendor/pgbouncer"
VENDORED_STUNNEL="vendor/stunnel"

# vendor pgbouncer into the slug
PATH="$BUILD_DIR/$VENDORED_PGBOUNCER/bin:$PATH"
echo "-----> Fetching and vendoring pgbouncer into slug"
mkdir -p "$BUILD_DIR/$VENDORED_PGBOUNCER"
tar xzf pgbouncer-${PGBOUNCER_VERSION}.tgz -C ${BUILD_DIR}/${VENDORED_PGBOUNCER}

# vendor stunnel into the slug
PATH="$BUILD_DIR/$VENDORED_STUNNEL/bin:$PATH"
echo "-----> Fetching and vendoring stunnel into slug"
mkdir -p "$BUILD_DIR/$VENDORED_STUNNEL"
tar xzf stunnel-${STUNNEL_VERSION}.tgz -C ${BUILD_DIR}/${VENDORED_STUNNEL}

echo "-----> Moving the configuration generation script into app/bin"
mkdir -p $BUILD_DIR/bin
cp "$BUILDPACK_DIR/bin/gen-pgbouncer-conf.sh" $BUILD_DIR/bin
chmod +x $BUILD_DIR/bin/gen-pgbouncer-conf.sh

echo "-----> Moving the start-pgbouncer-stunnel script into app/bin"
mkdir -p $BUILD_DIR/bin
cp "$BUILDPACK_DIR/bin/start-pgbouncer-stunnel" $BUILD_DIR/bin/
chmod +x $BUILD_DIR/bin/start-pgbouncer-stunnel

echo "-----> pgbouncer/stunnel done"
